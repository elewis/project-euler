import argparse

def problem1():
    """
    If we list all the natural numbers below 10 that are multiples of 3 or 5,
    we get 3, 5, 6 and 9. The sum of these multiples is 23.

    Find the sum of all the multiples of 3 or 5 below 1000.
    """
    total = 0
    for n in xrange(1000):
        if (n % 3 == 0) or (n % 5 == 0):
            total += n
    return total

def problem2():
    """
    Each new term in the Fibonacci sequence is generated by adding the
    previous two terms.

    By considering the terms in the Fibonacci sequence whose values do not
    exceed four million, find the sum of the even-valued terms.
    """
    total = 0
    t0, t1, t2 = 0, 1, 0
    while t0 <= 4000000:
        if t0 % 2 == 0:
            total += t0
        t2, t1 = t1, t0
        t0 = t2 + t1
    return total

def problem3():
    """
    The prime factors of 13195 are 5, 7, 13 and 29.

    What is the largest prime factor of the number 600851475143 ?
    """
    from math import floor, ceil, sqrt
    number = 600851475143

    def factor(num):
        for n in xrange(2, int(ceil(sqrt(num)))):
            if num % n == 0:
                return n, num / n
        return None, num

    f1, f2 = 1, number
    while f1 is not None:
        f1, f2 = factor(f2)
    return f2

def problem4():
    """
    A palindromic number reads the same both ways. The largest palindrome
    made from the product of two 2-digit numbers is 9009 = 91 x 99.

    Find the largest palindrome made from the product of two 3-digit numbers.
    """
    def is_palindrome(num):
        num = str(num)
        digits = len(num)
        for i in xrange(int(digits / 2 + 1)):
            if num[i] != num[digits - i - 1]:
                return False
        else:
            return True

    best = 0
    for i in xrange(100, 1000):
        for j in xrange(i, 1000):
            if is_palindrome(i * j):
                best = max(best, i * j)
    return best

def problem5():
    """
    2520 is the smallest number that can be divided by each of the numbers
    from 1 to 10 without any remainder.

    What is the smallest positive number that is evenly divisible by all of
    the numbers from 1 to 20?
    """
    i = 20
    while True:
        for j in xrange(1, 21):
            if i % j != 0:
                break
        else:
            return i
        i += 20
    return i

def problem6():
    """
    Find the difference between the sum of the squares of the first one
    hundred natural numbers and the square of the sum.
    """
    sum_of_sqr = (100 * 101 * 201) / 6
    sqr_of_sum = (100 * (100 + 1) / 2) ** 2
    return abs(sum_of_sqr - sqr_of_sum)

def problem7():
    """
    By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can
    see that the 6th prime is 13.

    What is the 10 001st prime number?
    """
    primes = [2, 3, 5, 7, 11, 13, 17, 19]

    i = 21
    while len(primes) < 10001:
        for p in primes:
            if i % p == 0:
                break
        else:
            primes.append(i)
        i += 2
    return primes[-1]

def problem8():
    """
    Find the greatest product of five consecutive digits in the given number.
    """
    number = (
        "73167176531330624919225119674426574742355349194934"
        "96983520312774506326239578318016984801869478851843"
        "85861560789112949495459501737958331952853208805511"
        "12540698747158523863050715693290963295227443043557"
        "66896648950445244523161731856403098711121722383113"
        "62229893423380308135336276614282806444486645238749"
        "30358907296290491560440772390713810515859307960866"
        "70172427121883998797908792274921901699720888093776"
        "65727333001053367881220235421809751254540594752243"
        "52584907711670556013604839586446706324415722155397"
        "53697817977846174064955149290862569321978468622482"
        "83972241375657056057490261407972968652414535100474"
        "82166370484403199890008895243450658541227588666881"
        "16427171479924442928230863465674813919123162824586"
        "17866458359124566529476545682848912883142607690042"
        "24219022671055626321111109370544217506941658960408"
        "07198403850962455444362981230987879927244284909188"
        "84580156166097919133875499200524063689912560717606"
        "05886116467109405077541002256983155200055935729725"
        "71636269561882670428252483600823257530420752963450"
    )
    product = 0
    for i in xrange(len(number) - 4):
        digits = [int(char) for char in number[i:i+5]]
        product = max(product, reduce(lambda x,y: x*y, digits))
    return product

def problem9():
    """
    A Pythagorean triplet is a set of three natural numbers, a < b < c, for
    which, a^2 + b^2 = c^2.

    There exists exactly one Pythagorean triplet for which a + b + c = 1000.
    Find the product abc.
    """
    for a in xrange(1, 334):
        for b in xrange(a, 667):
            c = 1000 - a - b
            if a**2 + b**2 == c**2:
                return a * b * c
    return None

def problem10():
    """
    The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

    Find the sum of all the primes below two million.
    """
    limit = 2000000
    sieve = [True for x in xrange(limit)]
    total = 0

    for i in xrange(2, limit):
        if sieve[i]:
            total += i
            for j in xrange(i, limit, i):
                sieve[j] = False
    return total

def problem11():
    """
    What is the greatest product of four adjacent numbers in the same
    direction (up, down, left, right, or diagonally) in the 20x20 grid?
    """
    grid = [
        map(int, "08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08".split(' ')),
        map(int, "49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00".split(' ')),
        map(int, "81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65".split(' ')),
        map(int, "52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91".split(' ')),
        map(int, "22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80".split(' ')),
        map(int, "24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50".split(' ')),
        map(int, "32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70".split(' ')),
        map(int, "67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21".split(' ')),
        map(int, "24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72".split(' ')),
        map(int, "21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95".split(' ')),
        map(int, "78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92".split(' ')),
        map(int, "16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57".split(' ')),
        map(int, "86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58".split(' ')),
        map(int, "19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40".split(' ')),
        map(int, "04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66".split(' ')),
        map(int, "88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69".split(' ')),
        map(int, "04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36".split(' ')),
        map(int, "20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16".split(' ')),
        map(int, "20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54".split(' ')),
        map(int, "01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48".split(' ')),
    ]

    def rows(grid):
        return iter(grid)
    def cols(grid):
        for i in xrange(len(grid[0])):
            yield [row[i] for row in grid]
    def diags(grid):
        for x in xrange(len(grid[0])):
            yield [grid[y][xi] for xi, y in zip(xrange(x, len(grid[0])), xrange(0, len(grid) - x))]
            yield [grid[y][xi] for xi, y in zip(xrange(x, len(grid[0])), xrange(len(grid)-1, x-1, -1))]
        for y in xrange(1, len(grid)):
            yield [grid[yi][x] for x, yi in zip(xrange(0, len(grid[0]) - y), xrange(y, len(grid)))]
            yield [grid[yi][x] for x, yi in zip(xrange(0, len(grid[0]) - y), xrange(len(grid)-y-1, -1, -1))]

    def products(L):
        if len(L) >= 4:
            for i in xrange(len(L) - 3):
                yield reduce(lambda x,y: x*y, L[i:i+4])

    best = 0
    for row in rows(grid):
        p = list(products(row))
        if len(p) > 0:
            best = max(best, *p)
    for col in cols(grid):
        p = list(products(col))
        if len(p) > 0:
            best = max(best, *p)
    for diag in diags(grid):
        p = list(products(diag))
        if len(p) > 0:
            best = max(best, *p)
    return best

def problem12():
    """
    The sequence of triangle numbers is generated by adding the natural numbers.

    What is the first triangle number to have over five hundred divisors?
    """
    from math import sqrt
    def triangles():
        total, i = 1, 1
        while True:
            yield total
            i += 1
            total += i

    for x in triangles():
        divisors = 2 # 1 and x
        for i in xrange(2, int(sqrt(x)+1)):
            if x % i == 0:
                if x / i == i:
                    divisors += 1
                else:
                    divisors += 2
        if divisors > 500:
            return x

def problem13():
    """
    Work out the first ten digits of the sum of the following one-hundred
    50-digit numbers.
    """
    import requests, re

    numbers = requests.get('http://www.projecteuler.net/problem=13').text
    numbers = map(int, re.findall('([0-9]+)<br', numbers))
    return str(sum(numbers))[:10]

def problem16():
    """
    215 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.

    What is the sum of the digits of the number 21000?
    """
    number = 2**1000
    total = 0
    while number > 0:
        total += number % 10
        number /= 10
    return total

def problem17():
    """
    If the numbers 1 to 5 are written out in words: one, two, three, four,
    five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.

    If all the numbers from 1 to 1000 (one thousand) inclusive were written
    out in words, how many letters would be used?
    """
    ones = [
        '', 'one', 'two', 'three', 'four', 'five',
        'six', 'seven', 'eight', 'nine', 'ten',
        'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen',
        'sixteen', 'seventeen', 'eighteen', 'nineteen'
    ]
    tens = [
        '', '', 'twenty', 'thirty', 'forty', 'fifty',
        'sixty', 'seventy', 'eighty', 'ninety'
    ]
    total = 0
    for i in xrange(1, 1000):
        word = ''
        if i >= 100:
            word += ones[i/100] + 'hundred'
            if i%100 != 0:
                word += 'and'
        if i%100 < 20:
            word += ones[i%100]
        else:
            word += tens[i/10%10] + ones[i%10]
        total += len(word)
    return total + 11 # to include 1000

def problem20():
    """
    Find the sum of the digits in the number 100!
    """
    number = reduce(lambda x,y: x*y, xrange(1, 101))
    total = 0
    while number > 0:
        total += number % 10
        number /= 10
    return total

def problem30():
    """
    Find the sum of all the numbers that can be written as the sum of fifth
    powers of their digits.
    """
    powers = [0, 1, 32, 243, 1024, 3125, 7776, 16807, 32768, 59049]

    def digits(number):
        while number > 0:
            yield number % 10
            number /= 10

    total, i = 0, 3
    while i < 1000000:
        num_total = 0
        for d in digits(i):
            num_total += powers[d]
        if num_total == i:
            total += i
        i += 1
    return total

def problem34():
    """
    145 is a curious number, as 1! + 4! + 5! = 1 + 24 + 120 = 145.

    Find the sum of all numbers which are equal to the sum of the factorial
    of their digits.

    Note: as 1! = 1 and 2! = 2 are not sums they are not included.
    """
    facs = [1, 1, 2, 6, 24, 120, 720, 504, 40320, 362880]

    def digits(number):
        while number > 0:
            yield number % 10
            number /= 10

    total, i = 0, 3
    while i < 1000000:
        num_total = 0
        for d in digits(i):
            num_total += facs[d]
        if num_total == i:
            total += i
        i += 1
    return total

def problem52():
    """
    It can be seen that the number, 125874, and its double, 251748, contain
    exactly the same digits, but in a different order.

    Find the smallest positive integer, x, such that 2x, 3x, 4x, 5x, and 6x,
    contain the same digits.
    """
    def digits(number):
        while number > 0:
            yield number % 10
            number /= 10

    i = 1
    while True:
        products = [i*j for j in xrange(1, 7)]
        testdigits = [sorted(digits(p)) for p in products]

        for test in testdigits:
            if test != testdigits[0]:
                break
        else:
            return i
        i += 1

def problem59():
    """
    A modern encryption method is to take a text file, convert the bytes to
    ASCII, then XOR each byte with a given value, taken from a secret key.
    The advantage with the XOR function is that using the same encryption
    key on the cipher text, restores the plain text; for example,
    65 XOR 42 = 107, then 107 XOR 42 = 65.

    Unfortunately, this method is impractical for most users, so the modified
    method is to use a password as a key. If the password is shorter than the
    message, which is likely, the key is repeated cyclically throughout the
    message. The balance for this method is using a sufficiently long password
    key for security, but short enough to be memorable.

    Your task has been made easy, as the encryption key consists of three
    lower case characters. Using cipher1.txt, a file containing the encrypted
    ASCII codes, and the knowledge that the plain text must contain common
    English words, decrypt the message and find the sum of the ASCII values
    in the original text.
    """
    import requests

    def keys():
        alphabet = 'abcdefghijklmnopqrstuvwxyz'
        for a in alphabet:
            for b in alphabet:
                for c in alphabet:
                    yield ord(a), ord(b), ord(c)

    # Cipher ASCII codes given by the problem
    cipher = requests.get('http://projecteuler.net/project/cipher1.txt').text
    cipher = map(int, cipher.strip().split(','))

    # English word dictionary (all uppercase, separated by newlines)
    english = requests.get('http://inventwithpython.com/dictionary.txt').text
    english = set(english.strip().split('\n'))

    for key in keys():
        # Decrypt bytes
        message, ascii, i = '', [], 0
        while i < len(cipher):
            char = cipher[i] ^ key[i % len(key)]
            message += chr(char)
            ascii.append(char)
            i += 1

        # Determine if output is likely english text
        words = message.split(' ')
        count = 0
        for word in words:
            if word.upper() in english:
                count += 1
        if count * 1.0 / len(words) > 0.5:
            return sum(ascii)

def run_problem(number):
    try:
        result = globals()['problem' + str(number)]()
        print 'Problem ' + str(number) + ': ' + str(result)
    except KeyError:
        print 'Problem ' + str(number) + ': Function not found'

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--problem', '-p', type=int,
        help='problem number to evaluate, if completed')

    args = parser.parse_args()
    if args.problem:
        run_problem(args.problem)
    else:
        for i in xrange(1, 30):
            run_problem(i)
